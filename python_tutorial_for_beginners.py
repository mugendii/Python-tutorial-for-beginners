# -*- coding: utf-8 -*-
"""python tutorial for beginners.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hk5HbeKLBFaTnTKGh80F7bF6ses-urel

##THE ULTIMATE PYTHON TUTORIAL FOR BEGINNERS

Python is a general-purpose, interpreted, interactive and object-oriented, and high level programming  language. Python is designed to be highly readable.

# Basic syntax
"""

print("hello, word")

"""# Identifiers
It’s a name used to identify a variable,function, class, module or other objects.Identifiers use letters     (A-Z), numbers (0-9), and underscore(_). Python does not allow special characters such as @,#,$,% within identifiers. Identifiers should also not start with a number

# Key words
This are words you cannot use to name a variable or any other identifier.
They include: 
1.	And 
2.	Or
3.	If
4.	Def
5.	Del
6.	Import
7.	Try
8.	Except
9.	Return
10.	Class
11.	For
12.	While
13.	Finally
14.	From print
15.	Pass
16.	Assert
17.	Not
18.	In
19.	Is
20.	With
21.	Lambda
22.	Yield
23.	Else
24.	Elif

#Variables
Variables are names given to specific memory locations.a varible is created the moment we assign avalue to it.variable names must start with a letter or an underscore. Variables are case sensitive (name, Name, and NAME are different variables)
"""

student_name = 'john'
marks = 90

"""#Datatypes
There are mainly four types of basic/primitive data types available in python
•	Numeric: int, float, complex
•	Sequence: String, list, tuple
•	Set
•	Dictionary

#Numeric data types
int , float, complex
"""

a = 5
print(a, "is of type", type(a))

b = 2.0
print(b, "is of type", type(b))

c = 1+2j
print(c, "is of type",type(c))

"""#strings
String is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes, ''' or '''
"""

s = "This is a string"
print(s)
s = '''A multiline
string'''
print(s)

"""#lists
List is an ordered sequence of items.Items separated by commas are enclosed within brackets [ ].
"""

a = [5,10,15,20,25,30,35,40]

# a[2] = 15
print("a[2] = ", a[2])

# a[0:3] = [5, 10, 15]
print("a[0:3] = ", a[0:3])

# a[5:] = [30, 35, 40]
print("a[5:] = ", a[5:])

"""# Tuples
Tuple is an ordered sequence of items same as a list. The only difference is that tuples are immutable. they are defined within parentheses () where items are separated by commas.

"""

marks =(23,45,67,90)

"""#set
Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces { }. Items in a set are not ordered
"""

a = {5,2,3,1,4}

# data type of variable a
print(type(a))

"""# Dictionary
Dictionary is an unordered collection of key-value pairs.
In Python, dictionaries are defined within braces {} with each item being a pair in the form key:value. Key and value can be of any type.
"""



"""# Python operators
##Arithmetic operators
Used to perform arithmetic operations like addition, subtraction, multiplication, division, etc.


"""

# Commented out IPython magic to ensure Python compatibility.
	+ 	#addition
	-	  #subtraction
	/	  #division
	*	  #multiplication
# 	%	  #modulus – gives the remainder of division
	// 	#floor division- gives the whole number after division
	**	#exponent

"""# Relational/ comparison operators
Used to compare values

"""

>	  #greater than
	< 	#less than
  ==	#equal to
	!=	#not equal to
	>= 	#greater than or equal to
	<=	#less than or equal to

"""# control statements
## if ,elif, else 
The if…elif…else statement is used in Python for decision making. the program evaluates the test expression and will execute statement(s) only if the test expression is True.

If the test expression is False, the statement(s) is not executed.

In Python, the body of the if statement is indicated by the indentation. The body starts with an indentation and the first unindented line marks the end
"""

if test expression:
    #Body of if
elif test expression:
    #Body of elif
else: 
   # Body of else